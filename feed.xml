<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">osotov</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://osotov.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://osotov.github.io" />
<updated>2015-09-14T17:49:02+04:00</updated>
<id>http://osotov.github.io/</id>
<author>
  <name>Михаил Осотов</name>
  <uri>http://osotov.github.io/</uri>
  <email>reghan7@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Юнит-тестирование и Битрикс. Часть 1.]]></title>
 <link rel="alternate" type="text/html" href="http://osotov.github.io/unit-tests-in-bitrix-context-part-1/" />
  <id>http://osotov.github.io/unit-tests-in-bitrix-context-part-1</id>
  <updated>2015-09-14T00:00:00-00:00</updated>
  <published>2015-09-14T00:00:00+04:00</published>
  
  <author>
    <name>Михаил Осотов</name>
    <uri>http://osotov.github.io</uri>
    <email>reghan7@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Про юнит-тестирование (его также называют модульным) уже очень много сказано.
Вот его определение из &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5&quot; target=&quot;blank&quot;&gt;википедии&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Модульное тестирование, или юнит-тестирование (англ. unit testing) — процесс в программировании, позволяющий проверить на корректность отдельные модули исходного кода программы.&lt;/p&gt;

  &lt;p&gt;Идея состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких ошибок.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;Немного теории&lt;/h3&gt;

&lt;p&gt;На мой взгляд, практика разработки с использованием модульного тестирования очень интересна и более того очень полезна.
Но! Тот факт, что о модульном тестировании говорят и тут и там, не означает, что надо все бросить и прямо сейчас написать тесты.
 &lt;strong&gt;Модульное тестирование - это не серебряная пуля!&lt;/strong&gt; Оно не решит все ваши проблемы с качеством! К тестированию надо походить с умом. Иначе это грозит большими временными, а значит, и финансовыми потерями. При этом результат будет далеко не таким, каким его ожидали.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/unit-tests.jpg&quot; alt=&quot;one does not simply write a unit tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Чтобы писать юнит-тесты, надо быть в курсе некоторых практик разработки. Следование этим практикам максимально упростит как написание, так и поддержку тестов.&lt;/p&gt;

&lt;p&gt;Наверняка вы слышали о принципах SOLID (если нет, то самое время ознакомиться). Обратим внимание на первый принцип. Вот что об этом принципе пишет &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%B5%D0%B4%D0%B8%D0%BD%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9_%D0%BE%D0%B1%D1%8F%D0%B7%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8&quot;&gt;википедия&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;В объектно-ориентированном программировании принцип единственной обязанности (англ. Single responsibility principle) обозначает, что каждый объект должен иметь одну обязанность и эта обязанность должна быть полностью инкапсулирована в класс. Все его сервисы должны быть направлены исключительно на обеспечение этой обязанности.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Проще говоря, класс должен быть как можно проще. Он не должен быть монстром, который умеет то, что могли бы делать несколько небольших. В идеале класс должен делать что-то одно. Собственно, чем проще класс, тем проще его тестировать.&lt;/p&gt;

&lt;p&gt;Перейдем к внедрению зависимостей (DI). Посмотрим, что пишет об этом &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%92%D0%BD%D0%B5%D0%B4%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B7%D0%B0%D0%B2%D0%B8%D1%81%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D0%B8&quot; target=&quot;blank&quot;&gt;википедия&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Внедрение зависимости (англ. Dependency injection, DI) — процесс предоставления внешней зависимости программному компоненту. Является специфичной формой «инверсии управления» (англ. Inversion of control, IoC), где изменение порядка связи осуществляется путём получения необходимой зависимости.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Звучит сложно, но суть очень проста. Зависимости класса в виде объектов других классов передаются извне, чаще всего это происходит с помощью конструктора, реже с помощью методов. DI позволяет сделать возможной подмену зависимостей заглушками в тестах. Зачем? Все просто, мы тестируем поведение конкретного класса, а не его зависимостей. Если не подменить поведение зависимостей, то они могут обращаться в базу данных, писать в файлы, а это уже не модульное тестирование.&lt;/p&gt;

&lt;p&gt;Ок, теперь посмотрим в сторону Битрикса. Когда надо тестировать, а когда нет? Я не вижу никакого смысла применять модульное тестирование для простых проектов, где Битрикс большей степени используется как CMS. В таких случаях, на мой взгляд, лучше применить функционального тестирования. С другой стороны, есть крупные проекты с множеством интеграций со сторонними сервисами, сложной бизнес логикой, где Битрикс используется как фреймворк. В случае таких проектов использование модульного тестирования будет действительно эффективно.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;Подведем промежуточные итоги.&lt;/h3&gt;

&lt;p&gt;Что нужно знать перед тем, как написать свой первый тест? Требуется понимание ООП и практика его использования. Если вы не используете ООП и хотите писать модульные тесты, у меня для вас плохие новости.&lt;/p&gt;

&lt;p&gt;Написав тест, не думайте, что он останется таким навсегда. Если вы меняете класс, на который вы написали этот тест, будьте добры актуализировать и сам тест, иначе через какое-то время вы просто выбросите весь набор тестов на помойку.&lt;/p&gt;

&lt;p&gt;Существует такая величина как покрытие тестами, она показывает насколько полно вы покрыли каждый аспект поведения класса тестами. Покрытие в 100% это, конечно, круто. Но! Это не значит, что нужно всегда стремиться к этому значению. Не забывайте о времени, потраченном на написание тестов. Важно собственное понимание того, достаточно ли тестов вы написали. Это приходит с опытом.&lt;/p&gt;

&lt;p&gt;Если вы любите всюду использовать статические методы классов, то самое время задуматься о том, что вы не сможете подменять их поведение заглушками. Насколько мне известно, в PHP нет возможности динамически переопределять функции и статические методы классов.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;А какие плюшки даст модульное тестирование?&lt;/h3&gt;

&lt;p&gt;К очевидным моментам я отношу возможность проверки регрессии кода перед релизом, это поможет сэкономить кучу нервов. Лучше узнать об ошибке до релиза, не так ли?&lt;/p&gt;

&lt;p&gt;К менее очевидному, но не менее важному моменту я отношу повышение качества ООП архитектуры. В чем это выражается? При проектировании класса приходится задумываться о том как сделать его тестируемым. Это ведет к тому, что классы становятся проще, менее связанными (coupling) и более связными (cohesion) в лучших традициях SOLID. Все это, конечно, приходит с опытом, но на мой взгляд, оно того стоит.
С точки зрения производительности, разработчик начинающий писать тесты, несомненно будет тратить больше времени, чем на разработку без тестов. Но в перспективе уже опытный разработчик суммарно будет более производителен, т.к. тесты будут писаться очень быстро, а время на отлов багов значительно сократится.&lt;/p&gt;

&lt;p&gt;Если вы используете систему непрерывной интеграции (Continuous Integration), то у вас появится возможность включить запуск модульных тестов в план билда. Соответственно, если есть ошибки, билд не будет считаться успешным.&lt;/p&gt;

&lt;p&gt;Очевидно, одной теории будет мало, поэтому во второй части я расскажу о том, как подготовиться к написанию первого теста и приведу пример в контексте Битрикса.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://osotov.github.io/unit-tests-in-bitrix-context-part-1/&quot;&gt;Юнит-тестирование и Битрикс. Часть 1.&lt;/a&gt; was originally published by Михаил Осотов at &lt;a href=&quot;http://osotov.github.io&quot;&gt;osotov&lt;/a&gt; on 14.09.2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Первый пост]]></title>
 <link rel="alternate" type="text/html" href="http://osotov.github.io/first-post/" />
  <id>http://osotov.github.io/first-post</id>
  <updated>2015-08-31T00:00:00-00:00</updated>
  <published>2015-08-31T00:00:00+04:00</published>
  
  <author>
    <name>Михаил Осотов</name>
    <uri>http://osotov.github.io</uri>
    <email>reghan7@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;На самом деле, это не первый мой пост. Ранее я писал в блогах 1С-Битрикс. Вот &lt;a href=&quot;http://dev.1c-bitrix.ru/community/webdev/user/165764/blog/11020/&quot;&gt;тут&lt;/a&gt;  и &lt;a href=&quot;http://dev.1c-bitrix.ru/community/webdev/user/165764/blog/11281/&quot;&gt;тут&lt;/a&gt;. Большая часть коммерческих проектов, в которых мне довелось принимать участие, разрабатывалась на платформе 1С-Битрикс. Поэтому ничего удивительного, что много статей в моем блоге будет посвящено именно этому инструменту.&lt;/p&gt;

&lt;p&gt;Помимо разработки я занимался обучением стажеров, учавствовал в разработке программы стажировки и внутрикорпоративных стандартов разработки веб-приложений на 1С-Битрикс и PHP.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://osotov.github.io/first-post/&quot;&gt;Первый пост&lt;/a&gt; was originally published by Михаил Осотов at &lt;a href=&quot;http://osotov.github.io&quot;&gt;osotov&lt;/a&gt; on 31.08.2015.&lt;/p&gt;
  </content>
</entry>

</feed>
